import React, { useState, useEffect } from 'react';
import './RandomQuestion.css';

const RandomQuestion = ({ setCurrentTopic}) => {
  const [loading, setLoading] = useState(false);
  const MAX_QUESTIONS = 20;  // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Ö–æ—Ç–∏–º —Ö—Ä–∞–Ω–∏—Ç—å
  const KEEP_QUESTIONS = 10; // –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –≤–æ–ø—Ä–æ—Å–æ

  // –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º localStorage, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  useEffect(() => {
    if (!localStorage.getItem('generatedQuestions')) {
      localStorage.setItem('generatedQuestions', JSON.stringify([]));
    }
  }, []);

  const getRandomQuestion = async () => {
    setLoading(true);
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ localStorage
      const previousQuestionsJSON = localStorage.getItem('generatedQuestions');
      let previousQuestions = previousQuestionsJSON ? JSON.parse(previousQuestionsJSON) : [];
      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ KEEP_QUESTIONS
      if (previousQuestions.length >= MAX_QUESTIONS) {
        previousQuestions = previousQuestions.slice(-KEEP_QUESTIONS);
        localStorage.setItem('generatedQuestions', JSON.stringify(previousQuestions));
      }
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç –ø—Ä–æ–º–ø—Ç–∞)
      const previousQuestionsText = previousQuestions.slice(-5).join('\n');

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`
        },
        body: JSON.stringify({
          model: "gpt-4o",
          messages: [
            {
              role: "system",
              content: `You are an expert in creating tasks for the Norskpr√∏ven exam, with a focus on tasks that require writing texts (such tasks that may appear on the Norwegian language test Norskpr√∏ven). Your task is to generate a unique, diverse, simple, and clear interrogative prompt that encourages the candidate to write a text. The question must be formulated in Norwegian and contain only the question itself, without any additional explanations, instructions, or comments. The question must be clear and unambiguous, and must adhere to ethical standards by avoiding any provocative, racist, discriminatory, or otherwise unethical moral dilemmas. Example tasks: 'B√∏r kj√∏ttforbruket reduseres for √• redde milj√∏et?' or 'Er √∏konomisk vekst forenlig med b√¶rekraftig utvikling?', 'B√∏r butikker v√¶re √•pne p√• s√∏ndager?', 'B√∏r ytringsfriheten ha grenser?', 'B√∏r universell grunninntekt innf√∏res?', 'B√∏r offentlig transport v√¶re gratis for alle?', 'B√∏r vestlige land ha en mer restriktiv innvandringspolitikk?', 'B√∏r statsborgerskap gis automatisk til barn f√∏dt i et land?', 'B√∏r regjeringer forby privatbiler i storbyer for √• bekjempe klimakrisen?', 'Hva synes du om at mange velger √• ikke f√• barn?', 'Hva synes du om at flere mennesker velger √• jobbe frilans i stedet for fast jobb?', 'Hva synes du om at stadig flere jobber kan gj√∏res hjemmefra?', 'B√∏r sosiale medier ha aldersgrense?', ' B√∏r fysisk aktivitet v√¶re obligatorisk p√• arbeidsplassen?'. Use a variety of topics, such as politics, social life, refugees, culture, ecology, school, technology, health, medicine, education, migration, artificial intelligence, economic inequality and social justice, and other similar subjects. Use these and other diverse topics on which a question for the Norskpr√∏ven may be based. The question must be simple enough so that it does not require deep factual, technical, or scientific knowledge. In other words, the candidate should be able to write a text without having any specialized or expert-level background.And do not repeat or rephrase any of the following previously generated questions: ${previousQuestionsText}.Use unique, non-repetitive questions on diverse topics. If the question you intend to generate matches in theme and meaning with any of these questions: ${previousQuestionsText}, then create a question on a completely different topic instead.It is very important!If you see that the question you want to provide is the same as any of these questions: ${previousQuestionsText} , create COMPLETELY DIFFERENT question(TRY ANOTHER TOPIC WITH COMPLETELY DIFFERENT MEANING)!For example: if you see in these list of previous questions some topics about schools, education, or technologies then create topic for example about politics or immigration or medicine, i mean something that is completely different comparing to these previous questions: ${previousQuestionsText}. I need variety and diversity. If this list ${previousQuestionsText} is empty then create any question you want. Your questions need to be interesting, uniq and to encourage the candidate to write a text.`
            },
            {
              role: "user",
              content: "Generate a question for writing a text in Norwegian."
            }
          ]
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        setCurrentTopic(`Feil: ${errorData.error ? errorData.error.message : "Ukjent feil"}`);
      } else {
        const data = await response.json();
        if (data.choices && data.choices.length > 0) {
          const generatedQuestion = data.choices[0].message.content.trim();
          setCurrentTopic(generatedQuestion);
        } else {
          setCurrentTopic("Kunne ikke hente et gyldig sp√∏rsm√•l fra API.");
        }
      }
    } catch (error) {
      console.error("Feil under generering av sp√∏rsm√•l:", error);
      setCurrentTopic("Det oppstod en feil.. Vennligst pr√∏v igjen senere.");
    }
    setLoading(false);
  };


  return (
    <div className="random-question">
      <h2>F√• tema fra KI</h2>
      <p className='random-question-description'>ü§î Vet du ikke hva du skal skrive om? Generer et tilfeldig sp√∏rsm√•l! </p>
      <p>Trykk p√• knappen for √• f√• et tema fra KI</p>
      <button onClick={getRandomQuestion} disabled={loading}>
  {loading ? "Laster..." : "Generer tema"}
</button>
    </div>
  );
};

export default RandomQuestion;